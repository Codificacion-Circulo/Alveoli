# -*- coding: utf-8 -*-
"""check_xray-or-not.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sMCmH-tVt_IthCwMkGkP7Hu6K5jjq3SP
"""

! unzip /content/X_ray_train.zip

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from numpy.random import seed
seed(1337)
from tensorflow.python.keras.applications.mobilenet_v2 import MobileNetV2
from tensorflow.python.keras.applications.mobilenet_v2 import preprocess_input
#from tensorflow.python.keras.applications import densenet
#from tensorflow.python.keras.applications.densenet import preprocess_input
from tensorflow.python.keras.applications import vgg16
from tensorflow.python.keras.applications.vgg16 import preprocess_input
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.python.keras import layers, models, Model, optimizers,Input
from tensorflow.python.keras.layers import GlobalAveragePooling2D,Dropout

category_names = sorted(os.listdir('/content/train'))
nb_categories = len(category_names)
img_pr_cat = []
for category in category_names:
    folder = '/content/train' + '/' + category
    img_pr_cat.append(len(os.listdir(folder)))
sns.barplot(y=category_names, x=img_pr_cat).set_title("Number of training images per category:")

for subdir, dirs, files in os.walk('/content/train'):
    for file in files:
        img_file = subdir + '/' + file
        image = load_img(img_file)
        plt.figure()
        plt.title(subdir)
        plt.imshow(image)
        break

img_height, img_width = 224,224

"""preprocess

"""

train_data_dir  = '/content/train'

batch_size = 64
train_datagen =  ImageDataGenerator(
    shear_range = 0.2,
    zoom_range = 0.2,
    rescale=1./255,
    rotation_range=10, 
    width_shift_range=0.2, 
    height_shift_range=0.2,
    horizontal_flip=True, 
)

print('Total number of images for "training":')
train_generator = train_datagen.flow_from_directory(
train_data_dir,
target_size = (img_height, img_width),
batch_size=batch_size,
class_mode = "categorical")

learning_rate = 1e-3
epochs = 11

img_height, img_width = 224,224
conv_base=MobileNetV2(weights='imagenet',pooling='avg',include_top=False, input_shape = (img_width, img_height, 3))

for layer in conv_base.layers:
    layer.trainable=False
#Not Training existing weights of Keras Model (Transfer Learning)

model = models.Sequential()
model.add(conv_base)
model.add(Dropout(0.5))
model.add(layers.Dense(nb_categories, activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.save('/content/mobile-xray.h5')

history=model.fit(train_generator,epochs=epochs)

train_generator.class_indices



acc = history.history['accuracy']
loss = history.history['loss']
epochs = range(1,len(acc)+1)
plt.figure()
plt.plot(epochs, acc,'b', label = 'Training accuracy')
plt.title('Training accuracy')
plt.legend()
plt.figure()
plt.plot(epochs, loss,'r', label = 'Training loss')
plt.title('Training loss')
plt.legend()

model.save('/content/model1-check-XRAY.h5')

